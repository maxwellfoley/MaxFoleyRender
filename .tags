!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddEmissiveTerms	MaxFoleyRender/MaxFoleyRender/Raycaster.cpp	/^void Raycaster::AddEmissiveTerms(int begin, int end, Ray * rayBuffer, Color * colorBuffer, std::shared_ptr<Surfel> * surfelBuffer, Color * modulationBuffer)$/;"	f	class:Raycaster
Box	MaxFoleyRender/MaxFoleyRender/Box.h	/^			Box(){}$/;"	f	class:MFR::Box
Box	MaxFoleyRender/MaxFoleyRender/Box.h	/^			Box(Point _origin, float _width, float _height, float _depth)$/;"	f	class:MFR::Box
Box	MaxFoleyRender/MaxFoleyRender/Box.h	/^	class Box$/;"	c	namespace:MFR
Box_h	MaxFoleyRender/MaxFoleyRender/Box.h	/^#define Box_h$/;"	d
Camera	MaxFoleyRender/Camera.h	/^			Camera(){}$/;"	f	class:MFR::Camera
Camera	MaxFoleyRender/Camera.h	/^	class Camera$/;"	c	namespace:MFR
Camera_h	MaxFoleyRender/Camera.h	/^#define Camera_h$/;"	d
Color	MaxFoleyRender/Color.h	/^			Color(float _r, float _g, float _b)$/;"	f	class:MFR::Color
Color	MaxFoleyRender/Color.h	/^			Color(float f)$/;"	f	class:MFR::Color
Color	MaxFoleyRender/Color.h	/^			Color(void)$/;"	f	class:MFR::Color
Color	MaxFoleyRender/Color.h	/^	class Color {$/;"	c	namespace:MFR
Color_h	MaxFoleyRender/Color.h	/^#define Color_h$/;"	d
GenerateRays	MaxFoleyRender/MaxFoleyRender/Raycaster.cpp	/^void Raycaster::GenerateRays(int begin, int end, Ray * rayBuffer, std::shared_ptr<Camera> camera, RaycasterOptions options)$/;"	f	class:Raycaster
GetLightInfo	MaxFoleyRender/MaxFoleyRender/Raycaster.cpp	/^void Raycaster::GetLightInfo(int begin, int end, std::vector<std::shared_ptr<Light>> lights, std::shared_ptr<Surfel> * surfelBuffer, Color * biradianceBuffer, Ray* shadowRayBuffer)$/;"	f	class:Raycaster
IllumMode	MaxFoleyRender/Material.h	/^	enum IllumMode {flat, lambert, blinnPhong};$/;"	g	namespace:MFR
IntersectRays	MaxFoleyRender/MaxFoleyRender/Raycaster.cpp	/^void Raycaster::IntersectRays(int begin, int end, Ray * rayBuffer, std::shared_ptr<Surfel>  * surfelBuffer, TriTree * tt)$/;"	f	class:Raycaster
IntersectTriangle	MaxFoleyRender/MaxFoleyRender/Raycaster.cpp	/^bool Raycaster::IntersectTriangle(Ray ray, Tri t, float b[3], float& dist)$/;"	f	class:Raycaster
KDNode	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			KDNode(){}$/;"	f	class:MFR::KDNode
KDNode	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^	class KDNode {$/;"	c	namespace:MFR
KillThreads	MaxFoleyRender/MaxFoleyRender/Raycaster.cpp	/^void Raycaster::KillThreads(std::thread * t, int numThreads)$/;"	f	class:Raycaster
Light	MaxFoleyRender/Light.h	/^			Light() {$/;"	f	class:MFR::Light
Light	MaxFoleyRender/Light.h	/^			Light(Point _position, float _strength, LightType _type)$/;"	f	class:MFR::Light
Light	MaxFoleyRender/Light.h	/^	class Light {$/;"	c	namespace:MFR
LightType	MaxFoleyRender/Light.h	/^	enum LightType{PointLight};$/;"	g	namespace:MFR
Light_h	MaxFoleyRender/Light.h	/^#define Light_h$/;"	d
MFR	MaxFoleyRender/Camera.h	/^namespace MFR {$/;"	n
MFR	MaxFoleyRender/Color.h	/^namespace MFR {$/;"	n
MFR	MaxFoleyRender/Light.h	/^namespace MFR {$/;"	n
MFR	MaxFoleyRender/Material.h	/^namespace MFR$/;"	n
MFR	MaxFoleyRender/MaxFoleyRender/Box.h	/^namespace MFR {$/;"	n
MFR	MaxFoleyRender/MaxFoleyRender/Raycaster.h	/^namespace MFR {$/;"	n
MFR	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^namespace MFR {$/;"	n
MFR	MaxFoleyRender/Ray.h	/^namespace MFR {$/;"	n
MFR	MaxFoleyRender/Scene.h	/^namespace MFR {$/;"	n
MFR	MaxFoleyRender/SceneObject.h	/^namespace MFR {$/;"	n
MFR	MaxFoleyRender/Surfel.h	/^namespace MFR {$/;"	n
MFR	MaxFoleyRender/Tri.h	/^namespace MFR {$/;"	n
MFR	MaxFoleyRender/Vector.h	/^namespace MFR {$/;"	n
Material	MaxFoleyRender/Material.h	/^			Material()$/;"	f	class:MFR::Material
Material	MaxFoleyRender/Material.h	/^			Material(MFR::Color diffuseColor)$/;"	f	class:MFR::Material
Material	MaxFoleyRender/Material.h	/^	class Material$/;"	c	namespace:MFR
Material_h	MaxFoleyRender/Material.h	/^#define Material_h$/;"	d
PointLight	MaxFoleyRender/Light.h	/^	enum LightType{PointLight};$/;"	e	enum:MFR::LightType
Ray	MaxFoleyRender/Ray.h	/^			Ray(){}$/;"	f	class:MFR::Ray
Ray	MaxFoleyRender/Ray.h	/^			Ray(Point o, Vector dir)$/;"	f	class:MFR::Ray
Ray	MaxFoleyRender/Ray.h	/^	class Ray {$/;"	c	namespace:MFR
Ray_h	MaxFoleyRender/Ray.h	/^#define Ray_h$/;"	d
Raycaster	MaxFoleyRender/MaxFoleyRender/Raycaster.h	/^	class Raycaster {$/;"	c	namespace:MFR
RaycasterOptions	MaxFoleyRender/MaxFoleyRender/Raycaster.h	/^	struct RaycasterOptions {$/;"	s	namespace:MFR
Raycaster_h	MaxFoleyRender/MaxFoleyRender/Raycaster.h	/^#define Raycaster_h$/;"	d
RenderImage	MaxFoleyRender/MaxFoleyRender/Raycaster.cpp	/^void Raycaster::RenderImage(std::shared_ptr<Scene> scene, Color * colorBuffer, RaycasterOptions options)$/;"	f	class:Raycaster
ScatterRays	MaxFoleyRender/MaxFoleyRender/Raycaster.cpp	/^void Raycaster::ScatterRays(int begin, int end, Ray * rayBuffer, std::shared_ptr<Surfel> * surfelBuffer, Color * modulationBuffer, RaycasterOptions options)$/;"	f	class:Raycaster
Scene	MaxFoleyRender/Scene.h	/^			Scene() {$/;"	f	class:MFR::Scene
Scene	MaxFoleyRender/Scene.h	/^	class Scene {$/;"	c	namespace:MFR
SceneObject	MaxFoleyRender/SceneObject.h	/^			SceneObject(std::string filename)$/;"	f	class:MFR::SceneObject
SceneObject	MaxFoleyRender/SceneObject.h	/^	class SceneObject {$/;"	c	namespace:MFR
SceneObject_h	MaxFoleyRender/SceneObject.h	/^#define SceneObject_h$/;"	d
Scene_h	MaxFoleyRender/Scene.h	/^#define Scene_h$/;"	d
ShadePixels	MaxFoleyRender/MaxFoleyRender/Raycaster.cpp	/^void Raycaster::ShadePixels(int begin, int end, std::shared_ptr<Surfel> * surfelBuffer, Ray * shadowRayBuffer, Color * colorBuffer, Color * biradianceBuffer, Color * modulationBuffer, bool * lightShadowedBuffer) {$/;"	f	class:Raycaster
ShadowTests	MaxFoleyRender/MaxFoleyRender/Raycaster.cpp	/^void Raycaster::ShadowTests(int begin, int end, Ray * shadowRayBuffer, std::shared_ptr<Surfel> * surfelBuffer, bool* lightShadowedBuffer, TriTree * tt) {$/;"	f	class:Raycaster
Surfel	MaxFoleyRender/Surfel.h	/^			Surfel()$/;"	f	class:MFR::Surfel
Surfel	MaxFoleyRender/Surfel.h	/^			Surfel(Point _position, Vector _normal, std::shared_ptr<Material> _material)$/;"	f	class:MFR::Surfel
Surfel	MaxFoleyRender/Surfel.h	/^	class Surfel {$/;"	c	namespace:MFR
Surfel_h	MaxFoleyRender/Surfel.h	/^#define Surfel_h$/;"	d
Tri	MaxFoleyRender/Tri.h	/^			Tri()$/;"	f	class:MFR::Tri
Tri	MaxFoleyRender/Tri.h	/^			Tri(Point a, Point b, Point c)$/;"	f	class:MFR::Tri
Tri	MaxFoleyRender/Tri.h	/^	class Tri {$/;"	c	namespace:MFR
TriTree	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			TriTree() {$/;"	f	class:MFR::TriTree
TriTree	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			TriTree(std::vector<std::shared_ptr<Tri>> tris)$/;"	f	class:MFR::TriTree
TriTree	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^	class TriTree {$/;"	c	namespace:MFR
TriTree_h	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^#define TriTree_h$/;"	d
Tri_h	MaxFoleyRender/Tri.h	/^#define Tri_h$/;"	d
Vector	MaxFoleyRender/Vector.h	/^			Vector()$/;"	f	class:MFR::Vector
Vector	MaxFoleyRender/Vector.h	/^			Vector(arma::fvec arma_Vector)$/;"	f	class:MFR::Vector
Vector	MaxFoleyRender/Vector.h	/^			Vector(float x, float y, float z)$/;"	f	class:MFR::Vector
Vector	MaxFoleyRender/Vector.h	/^	class Vector {$/;"	c	namespace:MFR
Vector_h	MaxFoleyRender/Vector.h	/^#define Vector_h$/;"	d
abs	MaxFoleyRender/Vector.h	/^			Vector & abs()$/;"	f	class:MFR::Vector
ambient	MaxFoleyRender/Material.h	/^			Color ambient;$/;"	m	class:MFR::Material
arma_Vector	MaxFoleyRender/Vector.h	/^			arma::fvec arma_Vector;$/;"	m	class:MFR::Vector
b	MaxFoleyRender/Color.h	/^			float b;$/;"	m	class:MFR::Color
biradiance	MaxFoleyRender/Light.h	/^			Color biradiance(Point p)$/;"	f	class:MFR::Light
blinnPhong	MaxFoleyRender/Material.h	/^	enum IllumMode {flat, lambert, blinnPhong};$/;"	e	enum:MFR::IllumMode
boundingBox	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			Box boundingBox;$/;"	m	class:MFR::KDNode
build	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			KDNode * build(std::vector<std::shared_ptr<Tri>> tris, int depth) {$/;"	f	class:MFR::TriTree
calculateImage	MaxFoleyRender/MaxFoleyRender/main.cpp	/^void calculateImage(MFR::Color * buf, int width, int height)$/;"	f
camera	MaxFoleyRender/Scene.h	/^			std::shared_ptr<Camera> camera;$/;"	m	class:MFR::Scene
clamp	MaxFoleyRender/MaxFoleyRender/main.cpp	/^int clamp(int v, int lo, int hi)$/;"	f
color	MaxFoleyRender/Light.h	/^			Color color;$/;"	m	class:MFR::Light
cross	MaxFoleyRender/Vector.h	/^			Vector cross(const Vector & rhs)$/;"	f	class:MFR::Vector
depth	MaxFoleyRender/MaxFoleyRender/Box.h	/^			float depth;$/;"	m	class:MFR::Box
diffuse	MaxFoleyRender/Material.h	/^			Color diffuse;$/;"	m	class:MFR::Material
direction	MaxFoleyRender/Ray.h	/^        	Vector direction;$/;"	m	class:MFR::Ray
distance	MaxFoleyRender/Vector.h	/^			float distance(Vector p)$/;"	f	class:MFR::Vector
dot	MaxFoleyRender/Vector.h	/^			float dot(const Vector & rhs)$/;"	f	class:MFR::Vector
expand	MaxFoleyRender/MaxFoleyRender/Box.h	/^			Box expand(Box b)$/;"	f	class:MFR::Box
flat	MaxFoleyRender/Material.h	/^	enum IllumMode {flat, lambert, blinnPhong};$/;"	e	enum:MFR::IllumMode
focalLength	MaxFoleyRender/Camera.h	/^			float focalLength;$/;"	m	class:MFR::Camera
fov	MaxFoleyRender/Camera.h	/^			float fov;$/;"	m	class:MFR::Camera
g	MaxFoleyRender/Color.h	/^			float g;$/;"	m	class:MFR::Color
getBlankTexture	MaxFoleyRender/MaxFoleyRender/main.cpp	/^SDL_Texture * getBlankTexture(SDL_Window * win, SDL_Renderer * ren, int width, int height)$/;"	f
getBoundingBox	MaxFoleyRender/Tri.h	/^			Box getBoundingBox(){$/;"	f	class:MFR::Tri
getImageTexture	MaxFoleyRender/MaxFoleyRender/main.cpp	/^SDL_Texture * getImageTexture(char * filename, SDL_Window * win, SDL_Renderer * ren)$/;"	f
getMaterialsFromFile	MaxFoleyRender/Material.h	/^			static std::vector<std::shared_ptr<Material>> getMaterialsFromFile(std::string filename)$/;"	f	class:MFR::Material
getMidpoint	MaxFoleyRender/Tri.h	/^			Point getMidpoint() {$/;"	f	class:MFR::Tri
getTriVector	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			std::vector<std::shared_ptr<Tri>> getTriVector()$/;"	f	class:MFR::TriTree
height	MaxFoleyRender/MaxFoleyRender/Box.h	/^			float height;$/;"	m	class:MFR::Box
height	MaxFoleyRender/MaxFoleyRender/Raycaster.h	/^		int height;$/;"	m	struct:MFR::RaycasterOptions
hemiRandom	MaxFoleyRender/Vector.h	/^			static Vector hemiRandom(Vector v)$/;"	f	class:MFR::Vector
illumMode	MaxFoleyRender/Material.h	/^			IllumMode illumMode;$/;"	m	class:MFR::Material
intersect	MaxFoleyRender/MaxFoleyRender/Box.h	/^			bool intersect(Ray ray) {$/;"	f	class:MFR::Box
intersect	MaxFoleyRender/Tri.h	/^		bool intersect(Ray ray, float b[3], float & dist)$/;"	f	class:MFR::Tri
intersectRay	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			std::shared_ptr<Tri> intersectRay(Ray ray, float * b, float & dist)$/;"	f	class:MFR::TriTree
irHelper	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			std::shared_ptr<Tri> irHelper(KDNode * node, Ray ray, float b[3], float& dist)$/;"	f	class:MFR::TriTree
lambert	MaxFoleyRender/Material.h	/^	enum IllumMode {flat, lambert, blinnPhong};$/;"	e	enum:MFR::IllumMode
left	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			KDNode * left;$/;"	m	class:MFR::KDNode
length	MaxFoleyRender/Vector.h	/^			float length() {$/;"	f	class:MFR::Vector
lights	MaxFoleyRender/Scene.h	/^			std::vector<std::shared_ptr<Light>> lights;$/;"	m	class:MFR::Scene
loadFromObjFile	MaxFoleyRender/SceneObject.cpp	/^void MFR::SceneObject::loadFromObjFile(std::string filename) {$/;"	f	class:MFR::SceneObject
main	MaxFoleyRender/MaxFoleyRender/main.cpp	/^int main(int argc, const char * argv[]) {$/;"	f
makeCornellBoxScene	MaxFoleyRender/MaxFoleyRender/main.cpp	/^std::shared_ptr<MFR::Scene> makeCornellBoxScene() {$/;"	f
makeSingleCubeScene	MaxFoleyRender/MaxFoleyRender/main.cpp	/^std::shared_ptr<MFR::Scene> makeSingleCubeScene() {$/;"	f
material	MaxFoleyRender/Surfel.h	/^			std::shared_ptr<Material> material;$/;"	m	class:MFR::Surfel
material	MaxFoleyRender/Tri.h	/^			std::shared_ptr<Material> material;$/;"	m	class:MFR::Tri
materials	MaxFoleyRender/Scene.h	/^			std::vector<std::shared_ptr<Material>> materials;$/;"	m	class:MFR::Scene
materials	MaxFoleyRender/SceneObject.h	/^			std::map<std::string, std::shared_ptr<Material>> materials;$/;"	m	class:MFR::SceneObject
mesh	MaxFoleyRender/SceneObject.h	/^			std::vector<Tri> mesh;$/;"	m	class:MFR::SceneObject
multithread	MaxFoleyRender/MaxFoleyRender/Raycaster.cpp	/^void Raycaster::multithread(_Fp&& __f, int num, _Args&&... __args){$/;"	f	class:Raycaster
name	MaxFoleyRender/Material.h	/^			std::string name;$/;"	m	class:MFR::Material
normal	MaxFoleyRender/Surfel.h	/^			Vector normal;$/;"	m	class:MFR::Surfel
numRays	MaxFoleyRender/MaxFoleyRender/Raycaster.h	/^		int numRays;$/;"	m	struct:MFR::RaycasterOptions
numScatteringEvents	MaxFoleyRender/MaxFoleyRender/Raycaster.h	/^		int numScatteringEvents;$/;"	m	struct:MFR::RaycasterOptions
objects	MaxFoleyRender/Scene.h	/^			std::vector<std::shared_ptr<SceneObject>> objects;$/;"	m	class:MFR::Scene
operator *	MaxFoleyRender/Color.h	/^			friend Color operator*(Color lhs, Color rhs)$/;"	f	class:MFR::Color
operator *	MaxFoleyRender/Color.h	/^			friend Color operator*(Color lhs, const float f)$/;"	f	class:MFR::Color
operator *	MaxFoleyRender/Vector.h	/^			friend MFR::Vector operator*(MFR::Vector lhs, const float rhs)$/;"	f	class:MFR::Vector
operator *	MaxFoleyRender/Vector.h	/^			friend MFR::Vector operator*(const float rhs, MFR::Vector lhs)$/;"	f	class:MFR::Vector
operator *=	MaxFoleyRender/Color.h	/^			Color & operator*=(Color rhs)$/;"	f	class:MFR::Color
operator *=	MaxFoleyRender/Color.h	/^			Color & operator*=(float f)$/;"	f	class:MFR::Color
operator *=	MaxFoleyRender/Vector.h	/^			Vector & operator*=(float f)$/;"	f	class:MFR::Vector
operator +	MaxFoleyRender/Color.h	/^			friend MFR::Color operator+(MFR::Color lhs, const MFR::Color& rhs)$/;"	f	class:MFR::Color
operator +	MaxFoleyRender/Vector.h	/^			friend MFR::Vector operator+(MFR::Vector lhs, const MFR::Vector& rhs)$/;"	f	class:MFR::Vector
operator +=	MaxFoleyRender/Color.h	/^			Color & operator+=(const Color& rhs)$/;"	f	class:MFR::Color
operator +=	MaxFoleyRender/Vector.h	/^			Vector & operator+=(const Vector& rhs)$/;"	f	class:MFR::Vector
operator -	MaxFoleyRender/Vector.h	/^			Vector operator- ()$/;"	f	class:MFR::Vector
operator -	MaxFoleyRender/Vector.h	/^			friend MFR::Vector operator-(MFR::Vector lhs, const MFR::Vector& rhs)$/;"	f	class:MFR::Vector
operator -=	MaxFoleyRender/Vector.h	/^			Vector & operator-=(const Vector& rhs)$/;"	f	class:MFR::Vector
operator /	MaxFoleyRender/Color.h	/^			friend Color operator\/(Color lhs, const float f)$/;"	f	class:MFR::Color
operator /	MaxFoleyRender/Vector.h	/^			friend MFR::Vector operator\/(MFR::Vector lhs, const MFR::Vector& rhs)$/;"	f	class:MFR::Vector
operator /	MaxFoleyRender/Vector.h	/^			friend MFR::Vector operator\/(MFR::Vector lhs, const float rhs)$/;"	f	class:MFR::Vector
operator /=	MaxFoleyRender/Color.h	/^			Color & operator\/=(float f)$/;"	f	class:MFR::Color
operator /=	MaxFoleyRender/Vector.h	/^			Vector & operator\/=(const Vector& rhs)$/;"	f	class:MFR::Vector
operator /=	MaxFoleyRender/Vector.h	/^			Vector & operator\/=(float f)$/;"	f	class:MFR::Vector
operator <	MaxFoleyRender/Material.h	/^			friend bool operator< (const Material& a, const Material& b){$/;"	f	class:MFR::Material
operator <<	MaxFoleyRender/Color.h	/^			friend std::ostream& operator<<(std::ostream &strm, const MFR::Color &c) {$/;"	f	class:MFR::Color
operator <<	MaxFoleyRender/Material.h	/^			friend std::ostream& operator<<(std::ostream &strm, const MFR::Material &mat) {$/;"	f	class:MFR::Material
operator <<	MaxFoleyRender/MaxFoleyRender/Box.h	/^			friend std::ostream& operator<<(std::ostream &strm, const MFR::Box &box) {$/;"	f	class:MFR::Box
operator <<	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			friend std::ostream& operator<<(std::ostream &strm, const TriTree &tt) {$/;"	f	class:MFR::TriTree
operator <<	MaxFoleyRender/Ray.h	/^			friend std::ostream& operator<<(std::ostream &strm, const MFR::Ray &ray) {$/;"	f	class:MFR::Ray
operator <<	MaxFoleyRender/SceneObject.h	/^			friend std::ostream& operator<<(std::ostream &strm, const MFR::SceneObject &obj) {$/;"	f	class:MFR::SceneObject
operator <<	MaxFoleyRender/Tri.h	/^			friend std::ostream& operator<<(std::ostream &strm, const MFR::Tri &tri) {$/;"	f	class:MFR::Tri
operator <<	MaxFoleyRender/Vector.h	/^			friend std::ostream& operator<<(std::ostream &strm, const MFR::Vector &v) {$/;"	f	class:MFR::Vector
origin	MaxFoleyRender/MaxFoleyRender/Box.h	/^			Point origin;$/;"	m	class:MFR::Box
origin	MaxFoleyRender/Ray.h	/^        	Point origin;$/;"	m	class:MFR::Ray
points	MaxFoleyRender/Tri.h	/^			Point points[3];$/;"	m	class:MFR::Tri
poseMesh	MaxFoleyRender/Scene.h	/^			TriTree poseMesh()$/;"	f	class:MFR::Scene
posedMesh	MaxFoleyRender/Scene.h	/^			TriTree posedMesh;$/;"	m	class:MFR::Scene
position	MaxFoleyRender/Camera.h	/^			Point position;$/;"	m	class:MFR::Camera
position	MaxFoleyRender/Light.h	/^			Point position;$/;"	m	class:MFR::Light
position	MaxFoleyRender/SceneObject.h	/^			Point position;$/;"	m	class:MFR::SceneObject
position	MaxFoleyRender/Surfel.h	/^			Point position;$/;"	m	class:MFR::Surfel
preorderPrint	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			std::string preorderPrint(KDNode * node, int depth) const$/;"	f	class:MFR::TriTree
r	MaxFoleyRender/Color.h	/^			float r;$/;"	m	class:MFR::Color
rayBoxIntersectionUnitTests	MaxFoleyRender/MaxFoleyRender/main.cpp	/^void rayBoxIntersectionUnitTests() {$/;"	f
rayTriangleIntersectionUnitTests	MaxFoleyRender/MaxFoleyRender/main.cpp	/^void rayTriangleIntersectionUnitTests() {$/;"	f
right	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			KDNode * right;$/;"	m	class:MFR::KDNode
root	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			KDNode * root;$/;"	m	class:MFR::TriTree
rotate	MaxFoleyRender/Vector.h	/^			Vector rotate(Vector rotation)$/;"	f	class:MFR::Vector
rotateInDegrees	MaxFoleyRender/Vector.h	/^			Vector rotateInDegrees(Vector rotation)$/;"	f	class:MFR::Vector
rotation	MaxFoleyRender/Camera.h	/^			Point rotation;$/;"	m	class:MFR::Camera
rotation	MaxFoleyRender/SceneObject.h	/^			Vector rotation;$/;"	m	class:MFR::SceneObject
scale	MaxFoleyRender/SceneObject.h	/^			Vector scale;$/;"	m	class:MFR::SceneObject
scale	MaxFoleyRender/Vector.h	/^			Vector scale(Vector scale)$/;"	f	class:MFR::Vector
scatter	MaxFoleyRender/Surfel.h	/^			void scatter(Vector before, Color weight, Vector after)$/;"	f	class:MFR::Surfel
setMaterialOnAll	MaxFoleyRender/SceneObject.h	/^			void setMaterialOnAll(std::shared_ptr<Material> material)$/;"	f	class:MFR::SceneObject
shadowsEnabled	MaxFoleyRender/Light.h	/^			bool shadowsEnabled;$/;"	m	class:MFR::Light
size	MaxFoleyRender/MaxFoleyRender/Box.h	/^			float size()$/;"	f	class:MFR::Box
specular	MaxFoleyRender/Material.h	/^			Color specular;$/;"	m	class:MFR::Material
specularExponent	MaxFoleyRender/Material.h	/^			float specularExponent;$/;"	m	class:MFR::Material
strength	MaxFoleyRender/Light.h	/^			float strength;$/;"	m	class:MFR::Light
toString	MaxFoleyRender/Vector.h	/^			std::string toString()$/;"	f	class:MFR::Vector
translate	MaxFoleyRender/Vector.h	/^			Vector translate(Vector translation)$/;"	f	class:MFR::Vector
triangleBoundingBoxUnitTests	MaxFoleyRender/MaxFoleyRender/main.cpp	/^void triangleBoundingBoxUnitTests() {$/;"	f
tris	MaxFoleyRender/MaxFoleyRender/TriTree.h	/^			std::vector<std::shared_ptr<Tri>> tris;$/;"	m	class:MFR::KDNode
type	MaxFoleyRender/Light.h	/^			LightType type;$/;"	m	class:MFR::Light
unit	MaxFoleyRender/Vector.h	/^			Vector unit() {$/;"	f	class:MFR::Vector
width	MaxFoleyRender/MaxFoleyRender/Box.h	/^			float width;$/;"	m	class:MFR::Box
width	MaxFoleyRender/MaxFoleyRender/Raycaster.h	/^		int width;$/;"	m	struct:MFR::RaycasterOptions
writeColorBufferToTexture	MaxFoleyRender/MaxFoleyRender/main.cpp	/^void writeColorBufferToTexture(SDL_Texture * tex, MFR::Color * buf)$/;"	f
writeImageToFile	MaxFoleyRender/MaxFoleyRender/main.cpp	/^void writeImageToFile(MFR::Color * buf, char * filename, int width, int height)$/;"	f
x	MaxFoleyRender/Vector.h	/^			float x(){$/;"	f	class:MFR::Vector
y	MaxFoleyRender/Vector.h	/^			float y(){$/;"	f	class:MFR::Vector
z	MaxFoleyRender/Vector.h	/^			float z(){$/;"	f	class:MFR::Vector
